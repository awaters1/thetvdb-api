/**
 * TheTVDB API v2
 * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.
 *
 * OpenAPI spec version: 2.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * JSONErrors
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-05-25T18:21:04.363-04:00")
public class JSONErrors   {
  @SerializedName("invalidFilters")
  private List<String> invalidFilters = new ArrayList<String>();

  @SerializedName("invalidLanguage")
  private String invalidLanguage = null;

  @SerializedName("invalidQueryParams")
  private List<String> invalidQueryParams = new ArrayList<String>();

  public JSONErrors invalidFilters(List<String> invalidFilters) {
    this.invalidFilters = invalidFilters;
    return this;
  }

  public JSONErrors addInvalidFiltersItem(String invalidFiltersItem) {
    this.invalidFilters.add(invalidFiltersItem);
    return this;
  }

   /**
   * Invalid filters passed to route
   * @return invalidFilters
  **/
  @ApiModelProperty(example = "null", value = "Invalid filters passed to route")
  public List<String> getInvalidFilters() {
    return invalidFilters;
  }

  public void setInvalidFilters(List<String> invalidFilters) {
    this.invalidFilters = invalidFilters;
  }

  public JSONErrors invalidLanguage(String invalidLanguage) {
    this.invalidLanguage = invalidLanguage;
    return this;
  }

   /**
   * Invalid language or translation missing
   * @return invalidLanguage
  **/
  @ApiModelProperty(example = "null", value = "Invalid language or translation missing")
  public String getInvalidLanguage() {
    return invalidLanguage;
  }

  public void setInvalidLanguage(String invalidLanguage) {
    this.invalidLanguage = invalidLanguage;
  }

  public JSONErrors invalidQueryParams(List<String> invalidQueryParams) {
    this.invalidQueryParams = invalidQueryParams;
    return this;
  }

  public JSONErrors addInvalidQueryParamsItem(String invalidQueryParamsItem) {
    this.invalidQueryParams.add(invalidQueryParamsItem);
    return this;
  }

   /**
   * Invalid query params passed to route
   * @return invalidQueryParams
  **/
  @ApiModelProperty(example = "null", value = "Invalid query params passed to route")
  public List<String> getInvalidQueryParams() {
    return invalidQueryParams;
  }

  public void setInvalidQueryParams(List<String> invalidQueryParams) {
    this.invalidQueryParams = invalidQueryParams;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JSONErrors jSONErrors = (JSONErrors) o;
    return Objects.equals(this.invalidFilters, jSONErrors.invalidFilters) &&
        Objects.equals(this.invalidLanguage, jSONErrors.invalidLanguage) &&
        Objects.equals(this.invalidQueryParams, jSONErrors.invalidQueryParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invalidFilters, invalidLanguage, invalidQueryParams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JSONErrors {\n");
    
    sb.append("    invalidFilters: ").append(toIndentedString(invalidFilters)).append("\n");
    sb.append("    invalidLanguage: ").append(toIndentedString(invalidLanguage)).append("\n");
    sb.append("    invalidQueryParams: ").append(toIndentedString(invalidQueryParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

